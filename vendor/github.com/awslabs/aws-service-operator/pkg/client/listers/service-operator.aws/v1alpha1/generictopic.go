/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/awslabs/aws-service-operator/pkg/apis/service-operator.aws/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GenericTopicLister helps list GenericTopics.
type GenericTopicLister interface {
	// List lists all GenericTopics in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GenericTopic, err error)
	// GenericTopics returns an object that can list and get GenericTopics.
	GenericTopics(namespace string) GenericTopicNamespaceLister
	GenericTopicListerExpansion
}

// genericTopicLister implements the GenericTopicLister interface.
type genericTopicLister struct {
	indexer cache.Indexer
}

// NewGenericTopicLister returns a new GenericTopicLister.
func NewGenericTopicLister(indexer cache.Indexer) GenericTopicLister {
	return &genericTopicLister{indexer: indexer}
}

// List lists all GenericTopics in the indexer.
func (s *genericTopicLister) List(selector labels.Selector) (ret []*v1alpha1.GenericTopic, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GenericTopic))
	})
	return ret, err
}

// GenericTopics returns an object that can list and get GenericTopics.
func (s *genericTopicLister) GenericTopics(namespace string) GenericTopicNamespaceLister {
	return genericTopicNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GenericTopicNamespaceLister helps list and get GenericTopics.
type GenericTopicNamespaceLister interface {
	// List lists all GenericTopics in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GenericTopic, err error)
	// Get retrieves the GenericTopic from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GenericTopic, error)
	GenericTopicNamespaceListerExpansion
}

// genericTopicNamespaceLister implements the GenericTopicNamespaceLister
// interface.
type genericTopicNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GenericTopics in the indexer for a given namespace.
func (s genericTopicNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GenericTopic, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GenericTopic))
	})
	return ret, err
}

// Get retrieves the GenericTopic from the indexer for a given namespace and name.
func (s genericTopicNamespaceLister) Get(name string) (*v1alpha1.GenericTopic, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("generictopic"), name)
	}
	return obj.(*v1alpha1.GenericTopic), nil
}
